#!/bin/bash

## Usage:
## 
##   cdt-collagen

# Check if the `COLLAGEN` environment variable is set
if [ -z "$COLLAGEN" ]; then
  echo "ERROR The COLLAGEN environment variable has to be set to the 'collagen.git' directory!"
  exit
fi

# Check if the `COLLAGEN` environment variable is set
if [ -z "$COLLAGEN_IMG_DIR" ]; then
  echo "ERROR Please set the COLLAGEN_IMG_DIR environment variable!"
  echo
  echo "Example:"
  echo
  echo "export COLLAGEN_IMG_DIR=$COLLAGEN/collagen/docs/docs/docs/user-guide/img"
  echo
  exit
fi

function deval () {
  cmd="$@"
  echo ">>> $cmd"
  eval $cmd
}

function next_image_name () {
  image_name="$1"

  cd "$COLLAGEN_IMG_DIR"

  if [ ! -f "${image_name}.000.png" ]; then
    echo "${image_name}.000.png"
  else
    #| eval "ls -1 ${image_name}.???.png"
    eval "ls -1 ${image_name}.???.png" \
      | sort \
      | tail -1 \
      | perl -ne '
          ($prefix, $number, $extension) = $_ =~ m|^(.*)\.(\d*)\.(png)$|;
          $number++;
          print("$prefix.$number.$extension\n");
        '
  fi
}

function cdt_collagen () {
  collagen_command="$@"

  collagen_command="${collagen_command} --dont-show";

  eval "${collagen_command}" | grep 'Saving image as:' | sed -e 's|Saving image as: *||'
}

## =========================================================
## Processing parameters and options
## ---------------------------------------------------------

# defaults
parameters=""

image_name=""
collagen_command="collagen"
while (($#)); do

  case "$1" in

    g | grid )  
      
      param=$2; shift
      collagen_command="${collagen_command} grid $param";
      image_name="grid.$param";
      ;;

    s | sequence )  
      
      param=$2; shift
      collagen_command="${collagen_command} sequence $param";
      image_name="sequence.$param";
      ;;

    r | --spacing-range ) 

      min=$2; shift
      max=$2; shift
      collagen_command="${collagen_command} --spacing-range $min $max";
      image_name="${image_name}.sr:$min-$max";
      ;;

    w | --image-width ) 

      image_width=$2; shift
      collagen_command="${collagen_command} --image-width $image_width";
      image_name="${image_name}.w:$image_width";
      ;;

    d | --dataset ) 

      dataset=$2; shift
      collagen_command="${collagen_command} --dataset $dataset";
      image_name="${image_name}.$dataset";
      ;;

    s | --subset ) 

      subset=$2; shift
      collagen_command="${collagen_command} --subset $subset";
      image_name="${image_name}.$subset";
      ;;

    c | --spec ) 

      spec=$2; shift
      collagen_command="${collagen_command} --spec $spec";
      image_name="${image_name}.a:$spec";
      ;;

    e | --spec-example ) 

      spec_example=$2; shift
      spec_example_path="$COLLAGEN/examples/specs/$spec_example"
      spec_pattern=$(echo "$spec_example" | sed 's|\.yaml$||')
      collagen_command="${collagen_command} --spec $spec_example_path";
      image_name="${image_name}.e:$spec_pattern";
      ;;

    x | --scale ) 

      scale=$2; shift
      collagen_command="${collagen_command} --scale $scale";
      image_name="${image_name}.x:$scale";
      ;;

    i | --height ) 

      height=$2; shift
      collagen_command="${collagen_command} --height $height";
      image_name="${image_name}.i:$height";
      ;;

    j | --width ) 

      width=$2; shift
      collagen_command="${collagen_command} --width $width";
      image_name="${image_name}.j:$width";
      ;;

    * )  echo "ERROR Unknown parameter: $1" > /dev/stderr;;

  esac
  
  shift

done

## =========================================================
## main
## ---------------------------------------------------------

# Generate the image
echo ">>> Generating image: ${collagen_command}" > /dev/stderr
generated_image_name=$(cdt_collagen "${collagen_command}")
echo ">>> generated image name: ${generated_image_name}"

# Copy the image to the image dir
next_image_name=$(next_image_name "${image_name}")
echo ">>> next image name: ${next_image_name}"

next_image_path="${COLLAGEN_IMG_DIR}/${next_image_name}"
deval cp "${generated_image_name}" "${next_image_path}"

# Show the image
deval open "${next_image_path}"

# Generate a short form of the command by getting rid of the directlry of the 
# augmentation operation file:
# Example: "/some/path/collagen.git/examples/augment/ops.yaml" -> "ops.yaml"
collagen_command_short=$(echo "${collagen_command}" | sed -e "s|${COLLAGEN}[^ ]*/||")

# Generate some useful markdown code
cat <<FIN

\`\`\`python
${collagen_command_short}
\`\`\`

![${collagen_command_short}](img/${next_image_name} "${collagen_command_short}")

FIN

## =========================================================
## =========================================================

## fin.
